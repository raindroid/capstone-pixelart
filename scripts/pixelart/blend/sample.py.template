import os, sys, random, shutil
from pathlib import Path
import json

# =============================================================================
# =========================== START Blender Script ============================
print(f"Start executing blender script from {__file__}")
pixelart_path = Path("__template_pixelart_path")
work_directory = "__template_work_path"

sys.path.append(os.path.dirname(__file__))
sys.path.append(str(pixelart_path / "scripts/pixelart/blend"))
import blender_operation as blender
import libpixelart as pixelart

# load parameters (replace remplates)
output_path = pixelart_path / "__template_output_path"
camera_param = __template_camera_param
objects_param = __template_objects_param
scene_param = __template_scene_param
debug = __template_debug

# other settings
settings = __template_settings

# remove the default Cube in the blender
blender.remove_object("Cube")

# append scene model(s)
blender.import_blend_model(
    str(pixelart_path / "models/scenes" /
        scene_param['path']), "Collection", scene_param['collection']
)

# append all objects
objects_list = objects_param.keys()
for object_name in objects_list:
    object_param = objects_param[object_name]
    blender.import_blend_model(
        str(pixelart_path / "models/objects" /
            object_param['path']), "Collection", object_name
    )


# =============================================================================
# ==================== START rendering and generating labels ==================
render_path = output_path / "render"
render_path.mkdir(parents=True, exist_ok=True)

render_settings = {
    "image_limit": random.randint(*settings['image_count']),
    "overlap_object_retry_limit": settings['overlap_object_retry_limit'],
    "overlap_retry_limit": settings['overlap_retry_limit'],
    "bone_trans_retry_limit": settings['bone_trans_retry_limit'],
    "camera_retry_limit": settings['camera_retry_limit'],
}
result = pixelart.render_images(
    camera_param,
    scene_param, objects_param, settings=render_settings,
    render_path=str(render_path), work_directory=work_directory, debug=debug)

blender.save_as_mainfile(directory=work_directory)

if 'error' in result:
    print(f"PixelArt script failed: {result['error']}")

# =============================================================================
# ======================= START rendering masks ===============================
mask_render_path = output_path / "masks"
mask_render_path.mkdir(parents=True, exist_ok=True)
pixelart.render_masks(result, render_settings, render_path=str(mask_render_path), work_directory=work_directory)
blender.save_as_mainfile(directory=work_directory, filename="mask")

# =============================================================================
# ======================= SAVE output file ====================================
dataset_path = output_path / "dataset.json"
with open(dataset_path, 'w') as dataset_fp:
    json.dump(result, dataset_fp)